-0.06196262]
test = c(-0.05687195, -0.0872337 , -0.10346527, -0.06678197, -0.01062199,
-0.03256529, -0.03835687, -0.07772312, -0.06117893, -0.07899361,
-0.06196262)
t.test(test,mu=0)
plot(seq(1,11),test)
#White blood cell counts for our 50 patients (WBC)
WBC = c(10:59)
#Whether they have appendicitis (Append: 1=yes, 0=no)
Append=c(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1)
#Combine our data
dat = data.frame(cbind(WBC, Append))
View(dat)
#Create variables that equal 1 if the test detects
#appendicitis (whether it's correct or not) using our five cutoffs.
dat$yes10 = ifelse(dat$WBC > 10, 1, 0)
dat$yes20 = ifelse(dat$WBC > 20, 1, 0)
dat$yes30 = ifelse(dat$WBC > 30, 1, 0)
dat$yes40 = ifelse(dat$WBC > 40, 1, 0)
dat$yes50 = ifelse(dat$WBC > 50, 1, 0)
View(dat)
dat$yes10 == 1
dat$Append == 1
dat$Append == 1
sum(dat$yes10 == 1 & dat$Append == 1)
sum(dat$yes10 ==1)
sum(dat$yes10 == 1 & dat$Append == 1)/sum(dat$yes10 ==1)
sensitivity <-c(sum(dat$yes10 == 1 & dat$Append == 1)/sum(dat$yes10 ==1),
sum(dat$yes20 ==1 & dat$Append == 1)/sum(dat$yes20 ==1),
sum(dat$yes30 ==1 & dat$Append == 1)/sum(dat$yes30 ==1),
sum(dat$yes40 ==1 & dat$Append == 1)/sum(dat$yes40 ==1),
sum(dat$yes50 ==1 & dat$Append == 1)/sum(dat$yes50 ==1))
specificity <-c(sum(dat$yes10 == 0 & dat$Append == 0)/sum(dat$yes10 ==0),
sum(dat$yes20 ==0 & dat$Append == 0)/sum(dat$yes20 ==0),
sum(dat$yes30 ==0 & dat$Append == 0)/sum(dat$yes30 ==0),
sum(dat$yes40 ==0 & dat$Append == 0)/sum(dat$yes40 ==0),
sum(dat$yes50 ==0 & dat$Append == 0)/sum(dat$yes50 ==0))
TruePositiveRate = sensitivity
FalsePositiveRate = 1 - specificity
specificity <-c(sum(dat$yes10 == 0 & dat$Append == 0)/sum(dat$yes10 ==0),
sum(dat$yes20 ==0 & dat$Append == 0)/sum(dat$yes20 ==0),
sum(dat$yes30 ==0 & dat$Append == 0)/sum(dat$yes30 ==0),
sum(dat$yes40 ==0 & dat$Append == 0)/sum(dat$yes40 ==0),
sum(dat$yes50 ==0 & dat$Append == 0)/sum(dat$yes50 ==0))
TruePositiveRate = sensitivity
FalsePositiveRate = 1 - specificity
ROCCurve = data.frame(cbind(FalsePositiveRate, TruePositiveRate))
View(ROCCurve)
plot(ROCCurve, main="ROC Curve for Appendicitis Test")
lines(ROCCurve, col="red")
min = 2.3554e+05
max = 1.3857e+07
?seq
notch = 1.3622e+06
notch
seq(min,max,notch)
max
plot(seq(1,10),seq(min,max,notch))
test = c(2.3554e+05   ,1.7491e+06   ,3.2626e+06   ,4.7762e+06   ,6.2897e+06   ,7.8032e+06   ,9.3168e+06    ,1.083e+07   ,1.2344e+07   ,1.3857e+07)
test
plot(seq(1,10),test)
ROCCurve
plot(ROCCurve, main="ROC Curve for Appendicitis Test")
lines(ROCCurve, col="red")
sensitivity =c( 0.47619,        0.375,          0.5,          0.5,          0.5,      0.33333,      0.33333,      0.33333,          0.5)
specificity = c( 0      ,0.42857          ,0.5          ,0.5,          0.5,      0.47368,      0.47368,      0.47368,          0.5)
TruePositiveRate = sensitivity
FalsePositiveRate = 1 - specificity
ROCCurve = data.frame(cbind(FalsePositiveRate, TruePositiveRate))
ROCCurve
plot(ROCCurve, main="ROC Curve for Appendicitis Test")
lines(ROCCurve, col="red")
0.9238795325112867*tan(3.14159*4.5/180) * 60
0.9238795325112867*tan(3.14159*4.5/180.) * 60 * 0.05
0.9238795325112867*tan(3.14159*4.5/180.) * 60 * 60
0.38268343236508984*tan(3.14159*4.5/180.) * 60 *40
setwd("C:/Users/micro/OneDrive - NYU Langone Health/Templeton2A_101421/data")
setwd("C:/Users/micro/OneDrive - NYU Langone Health/Templeton2A_101421")
data  = read.csv("./data/P3_templeton_exp2A_SD67_2021_Oct_13_1609.csv",header = T)[-c(1:7),]
same  = "6"
diff  = "7"
short_int_training_indices = which(data$retention_interval_training==0.75)
short_int_training_indices_retro = which((data$retention_interval_training==0.75)&(data$retro_0_post_1_training==0))
short_int_training_indices_post = which((data$retention_interval_training==0.75)&(data$retro_0_post_1_training==1))
long_int_training_indices = which(data$retention_interval_training==2.60)
long_int_training_indices_retro = which((data$retention_interval_training==2.60)&(data$retro_0_post_1_training==0))
long_int_training_indices_post = which((data$retention_interval_training==2.60)&(data$retro_0_post_1_training==1))
n_shortretint = length(short_int_training_indices)
n_shortretint_retro = length(short_int_training_indices_retro)
n_shortretint_post = length(short_int_training_indices_post)
n_longretint = length(long_int_training_indices)
n_longretint_retro = length(long_int_training_indices_retro)
n_longretint_post = length(long_int_training_indices_post)
#Log accuracy for retro-cue trials
data[which((data$retro_0_post_1_training==0)&(data$change_or_no_training==0)&(data$sd_training_resp.keys==same)),"accuracy_retro_training"] = 1
data[which((data$retro_0_post_1_training==0)&(data$change_or_no_training==1)&(data$sd_training_resp.keys==diff)),"accuracy_retro_training"] = 1
data[which((data$retro_0_post_1_training==0)&(data$change_or_no_training==0)&(data$sd_training_resp.keys==diff)),"accuracy_retro_training"] = 0
data[which((data$retro_0_post_1_training==0)&(data$change_or_no_training==1)&(data$sd_training_resp.keys==same)),"accuracy_retro_training"] = 0
#Log accuracy for post-cue trials
data[which((data$retro_0_post_1_training==1)&(data$change_or_no_training==0)&(data$sd_training_resp.keys==same)),"accuracy_post_training"] = 1
data  = read.csv("./data/P3_templeton_exp2A_SD67_2021_Oct_13_1609.csv",header = T)[-c(1:7),]
data  = read.csv("./data/P3_templeton_exp2A_SD67_2021_Oct_13_1534.csv",header = T)[-c(1:7),]
same  = "6"
diff  = "7"
short_int_training_indices = which(data$retention_interval_training==0.75)
short_int_training_indices_retro = which((data$retention_interval_training==0.75)&(data$retro_0_post_1_training==0))
short_int_training_indices_post = which((data$retention_interval_training==0.75)&(data$retro_0_post_1_training==1))
long_int_training_indices = which(data$retention_interval_training==2.60)
long_int_training_indices_retro = which((data$retention_interval_training==2.60)&(data$retro_0_post_1_training==0))
long_int_training_indices_post = which((data$retention_interval_training==2.60)&(data$retro_0_post_1_training==1))
n_shortretint = length(short_int_training_indices)
n_shortretint_retro = length(short_int_training_indices_retro)
n_shortretint_post = length(short_int_training_indices_post)
n_longretint = length(long_int_training_indices)
n_longretint_retro = length(long_int_training_indices_retro)
n_longretint_post = length(long_int_training_indices_post)
#Log accuracy for retro-cue trials
data[which((data$retro_0_post_1_training==0)&(data$change_or_no_training==0)&(data$sd_training_resp.keys==same)),"accuracy_retro_training"] = 1
data[which((data$retro_0_post_1_training==0)&(data$change_or_no_training==1)&(data$sd_training_resp.keys==diff)),"accuracy_retro_training"] = 1
data[which((data$retro_0_post_1_training==0)&(data$change_or_no_training==0)&(data$sd_training_resp.keys==diff)),"accuracy_retro_training"] = 0
data[which((data$retro_0_post_1_training==0)&(data$change_or_no_training==1)&(data$sd_training_resp.keys==same)),"accuracy_retro_training"] = 0
#Log accuracy for post-cue trials
data[which((data$retro_0_post_1_training==1)&(data$change_or_no_training==0)&(data$sd_training_resp.keys==same)),"accuracy_post_training"] = 1
data[which((data$retro_0_post_1_training==1)&(data$change_or_no_training==1)&(data$sd_training_resp.keys==diff)),"accuracy_post_training"] = 1
data[which((data$retro_0_post_1_training==1)&(data$change_or_no_training==0)&(data$sd_training_resp.keys==diff)),"accuracy_post_training"] = 0
data[which((data$retro_0_post_1_training==1)&(data$change_or_no_training==1)&(data$sd_training_resp.keys==same)),"accuracy_post_training"] = 0
accuracy_retro_shortretint = sum(data[short_int_training_indices_retro,"accuracy_retro_training"],na.rm=T)/n_shortretint_retro
accuracy_retro_longretint = sum(data[long_int_training_indices_retro,"accuracy_retro_training"],na.rm=T)/n_longretint_retro
accuracy_post_shortretint = sum(data[short_int_training_indices_post,"accuracy_post_training"],na.rm=T)/n_shortretint_post
accuracy_post_longretint = sum(data[long_int_training_indices_post,"accuracy_post_training"],na.rm=T)/n_longretint_post
accuracy_retro_shortretint
accuracy_retro_longretint
accuracy_post_shortretint
accuracy_post_longretint
data  = read.csv("./data/P3_2_templeton_exp2A_SD67_2021_Oct_13_1610.csv",header = T) #main task data P3
same  = "6"
diff  = "7"
short_int_training_indices = which(data$retention_interval_training==0.75)
short_int_training_indices_retro = which((data$retention_interval_training==0.75)&(data$retro_0_post_1_training==0))
short_int_training_indices_post = which((data$retention_interval_training==0.75)&(data$retro_0_post_1_training==1))
long_int_training_indices = which(data$retention_interval_training==2.60)
long_int_training_indices_retro = which((data$retention_interval_training==2.60)&(data$retro_0_post_1_training==0))
long_int_training_indices_post = which((data$retention_interval_training==2.60)&(data$retro_0_post_1_training==1))
n_shortretint = length(short_int_training_indices)
n_shortretint_retro = length(short_int_training_indices_retro)
n_shortretint_post = length(short_int_training_indices_post)
n_longretint = length(long_int_training_indices)
n_longretint_retro = length(long_int_training_indices_retro)
n_longretint_post = length(long_int_training_indices_post)
#Log accuracy for retro-cue trials
data[which((data$retro_0_post_1_training==0)&(data$change_or_no_training==0)&(data$sd_training_resp.keys==same)),"accuracy_retro_training"] = 1
data[which((data$retro_0_post_1_training==0)&(data$change_or_no_training==1)&(data$sd_training_resp.keys==diff)),"accuracy_retro_training"] = 1
data[which((data$retro_0_post_1_training==0)&(data$change_or_no_training==0)&(data$sd_training_resp.keys==diff)),"accuracy_retro_training"] = 0
data[which((data$retro_0_post_1_training==0)&(data$change_or_no_training==1)&(data$sd_training_resp.keys==same)),"accuracy_retro_training"] = 0
#Log accuracy for post-cue trials
data[which((data$retro_0_post_1_training==1)&(data$change_or_no_training==0)&(data$sd_training_resp.keys==same)),"accuracy_post_training"] = 1
data[which((data$retro_0_post_1_training==1)&(data$change_or_no_training==1)&(data$sd_training_resp.keys==diff)),"accuracy_post_training"] = 1
data[which((data$retro_0_post_1_training==1)&(data$change_or_no_training==0)&(data$sd_training_resp.keys==diff)),"accuracy_post_training"] = 0
data[which((data$retro_0_post_1_training==1)&(data$change_or_no_training==1)&(data$sd_training_resp.keys==same)),"accuracy_post_training"] = 0
accuracy_retro_shortretint = sum(data[short_int_training_indices_retro,"accuracy_retro_training"],na.rm=T)/n_shortretint_retro
accuracy_retro_longretint = sum(data[long_int_training_indices_retro,"accuracy_retro_training"],na.rm=T)/n_longretint_retro
accuracy_post_shortretint = sum(data[short_int_training_indices_post,"accuracy_post_training"],na.rm=T)/n_shortretint_post
accuracy_post_longretint = sum(data[long_int_training_indices_post,"accuracy_post_training"],na.rm=T)/n_longretint_post
#Log accuracy retro-cue trials main trials
data[which((data$retro_0_post_1_real==0)&(data$change_or_no_real==0)&(data$sd_resp_real.keys==same)),"accuracy_retro_real"] = 1
data[which((data$retro_0_post_1_real==0)&(data$change_or_no_real==1)&(data$sd_resp_real.keys==diff)),"accuracy_retro_real"] = 1
data[which((data$retro_0_post_1_real==0)&(data$change_or_no_real==0)&(data$sd_resp_real.keys==diff)),"accuracy_retro_real"] = 0
data[which((data$retro_0_post_1_real==0)&(data$change_or_no_real==1)&(data$sd_resp_real.keys==same)),"accuracy_retro_real"] = 0
#Log accuracy post-cue trials main trials
data[which((data$retro_0_post_1_real==1)&(data$change_or_no_real==0)&(data$sd_resp_real.keys==same)),"accuracy_post_real"] = 1
data[which((data$retro_0_post_1_real==1)&(data$change_or_no_real==1)&(data$sd_resp_real.keys==diff)),"accuracy_post_real"] = 1
data[which((data$retro_0_post_1_real==1)&(data$change_or_no_real==0)&(data$sd_resp_real.keys==diff)),"accuracy_post_real"] = 0
data[which((data$retro_0_post_1_real==1)&(data$change_or_no_real==1)&(data$sd_resp_real.keys==same)),"accuracy_post_real"] = 0
short_int_main_indices = which(data$retention_interval_real==0.75)
short_int_main_indices_retro = which((data$retention_interval_real==0.75)&(data$retro_0_post_1_real==0))
short_int_main_indices_post = which((data$retention_interval_real==0.75)&(data$retro_0_post_1_real==1))
long_int_main_indices = which(data$retention_interval_real==2.60)
long_int_main_indices_retro = which((data$retention_interval_real==2.60)&(data$retro_0_post_1_real==0))
long_int_main_indices_post = which((data$retention_interval_real==2.60)&(data$retro_0_post_1_real==1))
mainAccRetroShort = sum(data[short_int_main_indices_retro,"accuracy_retro_real"],na.rm=T)/length(short_int_main_indices_retro)
mainAccRetroLong = sum(data[long_int_main_indices_retro,"accuracy_retro_real"],na.rm=T)/length(long_int_main_indices_retro)
mainAccPostLong = sum(data[long_int_main_indices_post,"accuracy_post_real"],na.rm=T)/length(long_int_main_indices_post)
mainAccRetroShort
mainAccRetroLong
mainAccPostLong
allsubs = c("P3_templeton_exp2A_SD67_2021_Oct_13_1534_all.csv","P5_templeton_exp2A_SD76_2021_Oct_14_1626.csv","P6_templeton_exp2A_SD76_2021_Oct_18_1406.csv","P7_templeton_exp2A_SD67_2021_Oct_21_1817.csv")
results_all = array(0,c(length(allsubs),7)) #subs x (retro_short_acc_training,retro_long_acc_training,post_short_acc_training,post_long_acc_training,retro_short_acc_real,retro_long_acc_real,post_long_acc_real)
for (sub in 1:length(allsubs)) {
if (grepl("67",allsubs[sub])){
same="6"
diff="7"
} else {
same="7"
diff="6"
}
data = read.csv(allsubs[sub],header = T)[-c(1:7),]
short_int_training_indices = which(data$retention_interval_training==0.75)
short_int_training_indices_retro = which((data$retention_interval_training==0.75)&(data$retro_0_post_1_training==0))
short_int_training_indices_post = which((data$retention_interval_training==0.75)&(data$retro_0_post_1_training==1))
long_int_training_indices = which(data$retention_interval_training==2.60)
long_int_training_indices_retro = which((data$retention_interval_training==2.60)&(data$retro_0_post_1_training==0))
long_int_training_indices_post = which((data$retention_interval_training==2.60)&(data$retro_0_post_1_training==1))
n_shortretint = length(short_int_training_indices)
n_shortretint_retro = length(short_int_training_indices_retro)
n_shortretint_post = length(short_int_training_indices_post)
n_longretint = length(long_int_training_indices)
n_longretint_retro = length(long_int_training_indices_retro)
n_longretint_post = length(long_int_training_indices_post)
#Log accuracy for retro-cue trials
data[which((data$retro_0_post_1_training==0)&(data$change_or_no_training==0)&(data$sd_training_resp.keys==same)),"accuracy_retro_training"] = 1
data[which((data$retro_0_post_1_training==0)&(data$change_or_no_training==1)&(data$sd_training_resp.keys==diff)),"accuracy_retro_training"] = 1
data[which((data$retro_0_post_1_training==0)&(data$change_or_no_training==0)&(data$sd_training_resp.keys==diff)),"accuracy_retro_training"] = 0
data[which((data$retro_0_post_1_training==0)&(data$change_or_no_training==1)&(data$sd_training_resp.keys==same)),"accuracy_retro_training"] = 0
#Log accuracy for post-cue trials
data[which((data$retro_0_post_1_training==1)&(data$change_or_no_training==0)&(data$sd_training_resp.keys==same)),"accuracy_post_training"] = 1
data[which((data$retro_0_post_1_training==1)&(data$change_or_no_training==1)&(data$sd_training_resp.keys==diff)),"accuracy_post_training"] = 1
data[which((data$retro_0_post_1_training==1)&(data$change_or_no_training==0)&(data$sd_training_resp.keys==diff)),"accuracy_post_training"] = 0
data[which((data$retro_0_post_1_training==1)&(data$change_or_no_training==1)&(data$sd_training_resp.keys==same)),"accuracy_post_training"] = 0
accuracy_retro_shortretint = sum(data[short_int_training_indices_retro,"accuracy_retro_training"],na.rm=T)/n_shortretint_retro
accuracy_retro_longretint = sum(data[long_int_training_indices_retro,"accuracy_retro_training"],na.rm=T)/n_longretint_retro
accuracy_post_shortretint = sum(data[short_int_training_indices_post,"accuracy_post_training"],na.rm=T)/n_shortretint_post
accuracy_post_longretint = sum(data[long_int_training_indices_post,"accuracy_post_training"],na.rm=T)/n_longretint_post
results_all[sub,1] = accuracy_retro_shortretint
results_all[sub,2] = accuracy_retro_longretint
results_all[sub,3] = accuracy_post_shortretint
results_all[sub,4] = accuracy_post_longretint
barplot(c(accuracy_retro_shortretint,accuracy_post_shortretint,accuracy_retro_longretint,accuracy_post_longretint),names.arg = c("Retro-cue\nshort retention","Post-cue\nshort retention","Retro-cue\nlong retention","Post-cue\nlong retention"),ylab="accuracy",ylim=c(0,0.8))
#Log accuracy retro-cue trials main trials
data[which((data$retro_0_post_1_real==0)&(data$change_or_no_real==0)&(data$sd_resp_real.keys==same)),"accuracy_retro_real"] = 1
data[which((data$retro_0_post_1_real==0)&(data$change_or_no_real==1)&(data$sd_resp_real.keys==diff)),"accuracy_retro_real"] = 1
data[which((data$retro_0_post_1_real==0)&(data$change_or_no_real==0)&(data$sd_resp_real.keys==diff)),"accuracy_retro_real"] = 0
data[which((data$retro_0_post_1_real==0)&(data$change_or_no_real==1)&(data$sd_resp_real.keys==same)),"accuracy_retro_real"] = 0
#Log accuracy post-cue trials main trials
data[which((data$retro_0_post_1_real==1)&(data$change_or_no_real==0)&(data$sd_resp_real.keys==same)),"accuracy_post_real"] = 1
data[which((data$retro_0_post_1_real==1)&(data$change_or_no_real==1)&(data$sd_resp_real.keys==diff)),"accuracy_post_real"] = 1
data[which((data$retro_0_post_1_real==1)&(data$change_or_no_real==0)&(data$sd_resp_real.keys==diff)),"accuracy_post_real"] = 0
data[which((data$retro_0_post_1_real==1)&(data$change_or_no_real==1)&(data$sd_resp_real.keys==same)),"accuracy_post_real"] = 0
short_int_main_indices = which(data$retention_interval_real==0.75)
short_int_main_indices_retro = which((data$retention_interval_real==0.75)&(data$retro_0_post_1_real==0))
short_int_main_indices_post = which((data$retention_interval_real==0.75)&(data$retro_0_post_1_real==1))
long_int_main_indices = which(data$retention_interval_real==2.60)
long_int_main_indices_retro = which((data$retention_interval_real==2.60)&(data$retro_0_post_1_real==0))
long_int_main_indices_post = which((data$retention_interval_real==2.60)&(data$retro_0_post_1_real==1))
mainAccRetroShort = sum(data[short_int_main_indices_retro,"accuracy_retro_real"],na.rm=T)/length(short_int_main_indices_retro)
mainAccRetroLong = sum(data[long_int_main_indices_retro,"accuracy_retro_real"],na.rm=T)/length(long_int_main_indices_retro)
mainAccPostLong = sum(data[long_int_main_indices_post,"accuracy_post_real"],na.rm=T)/length(long_int_main_indices_post)
results_all[sub,5] = mainAccRetroShort
results_all[sub,6] = mainAccRetroLong
results_all[sub,7] = mainAccPostLong
barplot(c(mainAccRetroShort,mainAccRetroLong,mainAccPostLong),names.arg=c("Retro short","Retro long","Post long"))
}
allsubs = c("./data/P3_templeton_exp2A_SD67_2021_Oct_13_1534_all.csv","./data/P5_templeton_exp2A_SD76_2021_Oct_14_1626.csv","./data/P6_templeton_exp2A_SD76_2021_Oct_18_1406.csv","P7_templeton_exp2A_SD67_2021_Oct_21_1817.csv")
results_all = array(0,c(length(allsubs),7)) #subs x (retro_short_acc_training,retro_long_acc_training,post_short_acc_training,post_long_acc_training,retro_short_acc_real,retro_long_acc_real,post_long_acc_real)
for (sub in 1:length(allsubs)) {
if (grepl("67",allsubs[sub])){
same="6"
diff="7"
} else {
same="7"
diff="6"
}
data = read.csv(allsubs[sub],header = T)[-c(1:7),]
short_int_training_indices = which(data$retention_interval_training==0.75)
short_int_training_indices_retro = which((data$retention_interval_training==0.75)&(data$retro_0_post_1_training==0))
short_int_training_indices_post = which((data$retention_interval_training==0.75)&(data$retro_0_post_1_training==1))
long_int_training_indices = which(data$retention_interval_training==2.60)
long_int_training_indices_retro = which((data$retention_interval_training==2.60)&(data$retro_0_post_1_training==0))
long_int_training_indices_post = which((data$retention_interval_training==2.60)&(data$retro_0_post_1_training==1))
n_shortretint = length(short_int_training_indices)
n_shortretint_retro = length(short_int_training_indices_retro)
n_shortretint_post = length(short_int_training_indices_post)
n_longretint = length(long_int_training_indices)
n_longretint_retro = length(long_int_training_indices_retro)
n_longretint_post = length(long_int_training_indices_post)
#Log accuracy for retro-cue trials
data[which((data$retro_0_post_1_training==0)&(data$change_or_no_training==0)&(data$sd_training_resp.keys==same)),"accuracy_retro_training"] = 1
data[which((data$retro_0_post_1_training==0)&(data$change_or_no_training==1)&(data$sd_training_resp.keys==diff)),"accuracy_retro_training"] = 1
data[which((data$retro_0_post_1_training==0)&(data$change_or_no_training==0)&(data$sd_training_resp.keys==diff)),"accuracy_retro_training"] = 0
data[which((data$retro_0_post_1_training==0)&(data$change_or_no_training==1)&(data$sd_training_resp.keys==same)),"accuracy_retro_training"] = 0
#Log accuracy for post-cue trials
data[which((data$retro_0_post_1_training==1)&(data$change_or_no_training==0)&(data$sd_training_resp.keys==same)),"accuracy_post_training"] = 1
data[which((data$retro_0_post_1_training==1)&(data$change_or_no_training==1)&(data$sd_training_resp.keys==diff)),"accuracy_post_training"] = 1
data[which((data$retro_0_post_1_training==1)&(data$change_or_no_training==0)&(data$sd_training_resp.keys==diff)),"accuracy_post_training"] = 0
data[which((data$retro_0_post_1_training==1)&(data$change_or_no_training==1)&(data$sd_training_resp.keys==same)),"accuracy_post_training"] = 0
accuracy_retro_shortretint = sum(data[short_int_training_indices_retro,"accuracy_retro_training"],na.rm=T)/n_shortretint_retro
accuracy_retro_longretint = sum(data[long_int_training_indices_retro,"accuracy_retro_training"],na.rm=T)/n_longretint_retro
accuracy_post_shortretint = sum(data[short_int_training_indices_post,"accuracy_post_training"],na.rm=T)/n_shortretint_post
accuracy_post_longretint = sum(data[long_int_training_indices_post,"accuracy_post_training"],na.rm=T)/n_longretint_post
results_all[sub,1] = accuracy_retro_shortretint
results_all[sub,2] = accuracy_retro_longretint
results_all[sub,3] = accuracy_post_shortretint
results_all[sub,4] = accuracy_post_longretint
barplot(c(accuracy_retro_shortretint,accuracy_post_shortretint,accuracy_retro_longretint,accuracy_post_longretint),names.arg = c("Retro-cue\nshort retention","Post-cue\nshort retention","Retro-cue\nlong retention","Post-cue\nlong retention"),ylab="accuracy",ylim=c(0,0.8))
#Log accuracy retro-cue trials main trials
data[which((data$retro_0_post_1_real==0)&(data$change_or_no_real==0)&(data$sd_resp_real.keys==same)),"accuracy_retro_real"] = 1
data[which((data$retro_0_post_1_real==0)&(data$change_or_no_real==1)&(data$sd_resp_real.keys==diff)),"accuracy_retro_real"] = 1
data[which((data$retro_0_post_1_real==0)&(data$change_or_no_real==0)&(data$sd_resp_real.keys==diff)),"accuracy_retro_real"] = 0
data[which((data$retro_0_post_1_real==0)&(data$change_or_no_real==1)&(data$sd_resp_real.keys==same)),"accuracy_retro_real"] = 0
#Log accuracy post-cue trials main trials
data[which((data$retro_0_post_1_real==1)&(data$change_or_no_real==0)&(data$sd_resp_real.keys==same)),"accuracy_post_real"] = 1
data[which((data$retro_0_post_1_real==1)&(data$change_or_no_real==1)&(data$sd_resp_real.keys==diff)),"accuracy_post_real"] = 1
data[which((data$retro_0_post_1_real==1)&(data$change_or_no_real==0)&(data$sd_resp_real.keys==diff)),"accuracy_post_real"] = 0
data[which((data$retro_0_post_1_real==1)&(data$change_or_no_real==1)&(data$sd_resp_real.keys==same)),"accuracy_post_real"] = 0
short_int_main_indices = which(data$retention_interval_real==0.75)
short_int_main_indices_retro = which((data$retention_interval_real==0.75)&(data$retro_0_post_1_real==0))
short_int_main_indices_post = which((data$retention_interval_real==0.75)&(data$retro_0_post_1_real==1))
long_int_main_indices = which(data$retention_interval_real==2.60)
long_int_main_indices_retro = which((data$retention_interval_real==2.60)&(data$retro_0_post_1_real==0))
long_int_main_indices_post = which((data$retention_interval_real==2.60)&(data$retro_0_post_1_real==1))
mainAccRetroShort = sum(data[short_int_main_indices_retro,"accuracy_retro_real"],na.rm=T)/length(short_int_main_indices_retro)
mainAccRetroLong = sum(data[long_int_main_indices_retro,"accuracy_retro_real"],na.rm=T)/length(long_int_main_indices_retro)
mainAccPostLong = sum(data[long_int_main_indices_post,"accuracy_post_real"],na.rm=T)/length(long_int_main_indices_post)
results_all[sub,5] = mainAccRetroShort
results_all[sub,6] = mainAccRetroLong
results_all[sub,7] = mainAccPostLong
barplot(c(mainAccRetroShort,mainAccRetroLong,mainAccPostLong),names.arg=c("Retro short","Retro long","Post long"))
}
allsubs = c("./data/P3_templeton_exp2A_SD67_2021_Oct_13_1534_all.csv","./data/P5_templeton_exp2A_SD76_2021_Oct_14_1626.csv","./data/P6_templeton_exp2A_SD76_2021_Oct_18_1406.csv","./data/P7_templeton_exp2A_SD67_2021_Oct_21_1817.csv")
results_all = array(0,c(length(allsubs),7)) #subs x (retro_short_acc_training,retro_long_acc_training,post_short_acc_training,post_long_acc_training,retro_short_acc_real,retro_long_acc_real,post_long_acc_real)
for (sub in 1:length(allsubs)) {
if (grepl("67",allsubs[sub])){
same="6"
diff="7"
} else {
same="7"
diff="6"
}
data = read.csv(allsubs[sub],header = T)[-c(1:7),]
short_int_training_indices = which(data$retention_interval_training==0.75)
short_int_training_indices_retro = which((data$retention_interval_training==0.75)&(data$retro_0_post_1_training==0))
short_int_training_indices_post = which((data$retention_interval_training==0.75)&(data$retro_0_post_1_training==1))
long_int_training_indices = which(data$retention_interval_training==2.60)
long_int_training_indices_retro = which((data$retention_interval_training==2.60)&(data$retro_0_post_1_training==0))
long_int_training_indices_post = which((data$retention_interval_training==2.60)&(data$retro_0_post_1_training==1))
n_shortretint = length(short_int_training_indices)
n_shortretint_retro = length(short_int_training_indices_retro)
n_shortretint_post = length(short_int_training_indices_post)
n_longretint = length(long_int_training_indices)
n_longretint_retro = length(long_int_training_indices_retro)
n_longretint_post = length(long_int_training_indices_post)
#Log accuracy for retro-cue trials
data[which((data$retro_0_post_1_training==0)&(data$change_or_no_training==0)&(data$sd_training_resp.keys==same)),"accuracy_retro_training"] = 1
data[which((data$retro_0_post_1_training==0)&(data$change_or_no_training==1)&(data$sd_training_resp.keys==diff)),"accuracy_retro_training"] = 1
data[which((data$retro_0_post_1_training==0)&(data$change_or_no_training==0)&(data$sd_training_resp.keys==diff)),"accuracy_retro_training"] = 0
data[which((data$retro_0_post_1_training==0)&(data$change_or_no_training==1)&(data$sd_training_resp.keys==same)),"accuracy_retro_training"] = 0
#Log accuracy for post-cue trials
data[which((data$retro_0_post_1_training==1)&(data$change_or_no_training==0)&(data$sd_training_resp.keys==same)),"accuracy_post_training"] = 1
data[which((data$retro_0_post_1_training==1)&(data$change_or_no_training==1)&(data$sd_training_resp.keys==diff)),"accuracy_post_training"] = 1
data[which((data$retro_0_post_1_training==1)&(data$change_or_no_training==0)&(data$sd_training_resp.keys==diff)),"accuracy_post_training"] = 0
data[which((data$retro_0_post_1_training==1)&(data$change_or_no_training==1)&(data$sd_training_resp.keys==same)),"accuracy_post_training"] = 0
accuracy_retro_shortretint = sum(data[short_int_training_indices_retro,"accuracy_retro_training"],na.rm=T)/n_shortretint_retro
accuracy_retro_longretint = sum(data[long_int_training_indices_retro,"accuracy_retro_training"],na.rm=T)/n_longretint_retro
accuracy_post_shortretint = sum(data[short_int_training_indices_post,"accuracy_post_training"],na.rm=T)/n_shortretint_post
accuracy_post_longretint = sum(data[long_int_training_indices_post,"accuracy_post_training"],na.rm=T)/n_longretint_post
results_all[sub,1] = accuracy_retro_shortretint
results_all[sub,2] = accuracy_retro_longretint
results_all[sub,3] = accuracy_post_shortretint
results_all[sub,4] = accuracy_post_longretint
barplot(c(accuracy_retro_shortretint,accuracy_post_shortretint,accuracy_retro_longretint,accuracy_post_longretint),names.arg = c("Retro-cue\nshort retention","Post-cue\nshort retention","Retro-cue\nlong retention","Post-cue\nlong retention"),ylab="accuracy",ylim=c(0,0.8))
#Log accuracy retro-cue trials main trials
data[which((data$retro_0_post_1_real==0)&(data$change_or_no_real==0)&(data$sd_resp_real.keys==same)),"accuracy_retro_real"] = 1
data[which((data$retro_0_post_1_real==0)&(data$change_or_no_real==1)&(data$sd_resp_real.keys==diff)),"accuracy_retro_real"] = 1
data[which((data$retro_0_post_1_real==0)&(data$change_or_no_real==0)&(data$sd_resp_real.keys==diff)),"accuracy_retro_real"] = 0
data[which((data$retro_0_post_1_real==0)&(data$change_or_no_real==1)&(data$sd_resp_real.keys==same)),"accuracy_retro_real"] = 0
#Log accuracy post-cue trials main trials
data[which((data$retro_0_post_1_real==1)&(data$change_or_no_real==0)&(data$sd_resp_real.keys==same)),"accuracy_post_real"] = 1
data[which((data$retro_0_post_1_real==1)&(data$change_or_no_real==1)&(data$sd_resp_real.keys==diff)),"accuracy_post_real"] = 1
data[which((data$retro_0_post_1_real==1)&(data$change_or_no_real==0)&(data$sd_resp_real.keys==diff)),"accuracy_post_real"] = 0
data[which((data$retro_0_post_1_real==1)&(data$change_or_no_real==1)&(data$sd_resp_real.keys==same)),"accuracy_post_real"] = 0
short_int_main_indices = which(data$retention_interval_real==0.75)
short_int_main_indices_retro = which((data$retention_interval_real==0.75)&(data$retro_0_post_1_real==0))
short_int_main_indices_post = which((data$retention_interval_real==0.75)&(data$retro_0_post_1_real==1))
long_int_main_indices = which(data$retention_interval_real==2.60)
long_int_main_indices_retro = which((data$retention_interval_real==2.60)&(data$retro_0_post_1_real==0))
long_int_main_indices_post = which((data$retention_interval_real==2.60)&(data$retro_0_post_1_real==1))
mainAccRetroShort = sum(data[short_int_main_indices_retro,"accuracy_retro_real"],na.rm=T)/length(short_int_main_indices_retro)
mainAccRetroLong = sum(data[long_int_main_indices_retro,"accuracy_retro_real"],na.rm=T)/length(long_int_main_indices_retro)
mainAccPostLong = sum(data[long_int_main_indices_post,"accuracy_post_real"],na.rm=T)/length(long_int_main_indices_post)
results_all[sub,5] = mainAccRetroShort
results_all[sub,6] = mainAccRetroLong
results_all[sub,7] = mainAccPostLong
barplot(c(mainAccRetroShort,mainAccRetroLong,mainAccPostLong),names.arg=c("Retro short","Retro long","Post long"))
}
sqrt(nrow(results_all))
nrow(results_all)
x = barplot(colMeans(results_all[,1:4]),names.arg = c("Retro-cue\nshort retention","Retro-cue\nlong retention","Post-cue\nshort retention","Post-cue\nlong retention"),ylab="accuracy",ylim=c(0,1),col=brewer.pal(4,"Set1"),main="Training accuracies across subjects (n = 4)")
y = as.matrix(colMeans(results_all[,1:4]))
se1 = sd(colMeans(results_all[,1:4]))/sqrt(nrow(results_all))
library(RColorBrewer)
x = barplot(colMeans(results_all[,1:4]),names.arg = c("Retro-cue\nshort retention","Retro-cue\nlong retention","Post-cue\nshort retention","Post-cue\nlong retention"),ylab="accuracy",ylim=c(0,1),col=brewer.pal(4,"Set1"),main="Training accuracies across subjects (n = 4)")
y = as.matrix(colMeans(results_all[,1:4]))
se1 = sd(colMeans(results_all[,1:4]))/sqrt(nrow(results_all))
text(x,y+0.07,labels=as.character(round(y,2)))
se1
sd(results_all[,1:4])
apply(results_all[,1:4],sd)
?Apply
?apply
apply(results_all[,1:4],2,sd)
se1 = apply(results_all[,1:4],2,sd)/sqrt(nrow(results_all))
se1
x = barplot(colMeans(results_all[,1:4]),names.arg = c("Retro-cue\nshort retention","Retro-cue\nlong retention","Post-cue\nshort retention","Post-cue\nlong retention"),ylab="accuracy",ylim=c(0,1),col=brewer.pal(4,"Set1"),main="Training accuracies across subjects (n = 4)")
y = as.matrix(colMeans(results_all[,1:4]))
se1 = apply(results_all[,1:4],2,sd)/sqrt(nrow(results_all))
text(x,y+0.07,labels=as.character(round(y,2)))
arrows(x, y - se1, x,y + se1, lwd = 1.5, angle = 90,code = 3, length = 0.05)
text(x,y+0.09,labels=as.character(round(y,2)))
x = barplot(colMeans(results_all[,1:4]),names.arg = c("Retro-cue\nshort retention","Retro-cue\nlong retention","Post-cue\nshort retention","Post-cue\nlong retention"),ylab="accuracy",ylim=c(0,1),col=brewer.pal(4,"Set1"),main="Training accuracies across subjects (n = 4)")
y = as.matrix(colMeans(results_all[,1:4]))
se1 = apply(results_all[,1:4],2,sd)/sqrt(nrow(results_all))
text(x,y+0.09,labels=as.character(round(y,2)))
arrows(x, y - se1, x,y + se1, lwd = 1.5, angle = 90,code = 3, length = 0.05)
x = barplot(colMeans(results_all[,1:4]),names.arg = c("Retro-cue\nshort retention","Retro-cue\nlong retention","Post-cue\nshort retention","Post-cue\nlong retention"),ylab="accuracy",ylim=c(0,1),col=brewer.pal(4,"Set1"),main="Training accuracies across subjects (n = 4)")
y = as.matrix(colMeans(results_all[,1:4]))
se1 = apply(results_all[,1:4],2,sd)/sqrt(nrow(results_all))
text(x,0.2,labels=as.character(round(y,2)))
arrows(x, y - se1, x,y + se1, lwd = 1.5, angle = 90,code = 3, length = 0.05)
x = barplot(colMeans(results_all[,1:4]),names.arg = c("Retro-cue\nshort retention","Retro-cue\nlong retention","Post-cue\nshort retention","Post-cue\nlong retention"),ylab="accuracy",ylim=c(0,1),col=brewer.pal(4,"Set1"),main="Training accuracies across subjects (n = 4)")
y = as.matrix(colMeans(results_all[,1:4]))
se1 = apply(results_all[,1:4],2,sd)/sqrt(nrow(results_all))
text(x,y-0.2,labels=as.character(round(y,2)))
arrows(x, y - se1, x,y + se1, lwd = 1.5, angle = 90,code = 3, length = 0.05)
x = barplot(colMeans(results_all[,5:7]),names.arg = c("Retro-cue\nshort retention","Retro-cue\nlong retention","Post-cue\nlong retention"),ylab="accuracy",ylim=c(0,1),col=brewer.pal(4,"Set1")[c(1,2,4)],main="Main Task Accuracies across subjects (n = 4)")
y = as.matrix(colMeans(results_all[,5:7]))
se2 = apply(results_all[,5:7],2,sd)/sqrt(nrow(results_all))
text(x,y+0.07,labels=as.character(round(y,2)))
arrows(x, y - se2, x,y + se2, lwd = 1.5, angle = 90,code = 3, length = 0.05)
x = barplot(colMeans(results_all[,5:7]),names.arg = c("Retro-cue\nshort retention","Retro-cue\nlong retention","Post-cue\nlong retention"),ylab="accuracy",ylim=c(0,1),col=brewer.pal(4,"Set1")[c(1,2,4)],main="Main Task Accuracies across subjects (n = 4)")
y = as.matrix(colMeans(results_all[,5:7]))
se2 = apply(results_all[,5:7],2,sd)/sqrt(nrow(results_all))
text(x,y-0.2,labels=as.character(round(y,2)))
arrows(x, y - se2, x,y + se2, lwd = 1.5, angle = 90,code = 3, length = 0.05)
data$sd_resp_real.rt
View(data)
2.6+0.5+0.8
0.75+0.5+0.8
test = na.rm(data$sd_resp_real.rt)
test = na.omit(data$sd_resp_real.rt)
mean(test)
diff(data$memDisplayOnTime)
mean(diff(data$memDisplayOnTime),na.rm=T)
trial_length = array(0,length(allsubs))
for (sub in 1:length(allsubs)) {
if (grepl("67",allsubs[sub])){
same="6"
diff="7"
} else {
same="7"
diff="6"
}
data = read.csv(allsubs[sub],header = T)[-c(1:7),]
short_int_training_indices = which(data$retention_interval_training==0.75)
short_int_training_indices_retro = which((data$retention_interval_training==0.75)&(data$retro_0_post_1_training==0))
short_int_training_indices_post = which((data$retention_interval_training==0.75)&(data$retro_0_post_1_training==1))
long_int_training_indices = which(data$retention_interval_training==2.60)
long_int_training_indices_retro = which((data$retention_interval_training==2.60)&(data$retro_0_post_1_training==0))
long_int_training_indices_post = which((data$retention_interval_training==2.60)&(data$retro_0_post_1_training==1))
n_shortretint = length(short_int_training_indices)
n_shortretint_retro = length(short_int_training_indices_retro)
n_shortretint_post = length(short_int_training_indices_post)
n_longretint = length(long_int_training_indices)
n_longretint_retro = length(long_int_training_indices_retro)
n_longretint_post = length(long_int_training_indices_post)
#Log accuracy for retro-cue trials
data[which((data$retro_0_post_1_training==0)&(data$change_or_no_training==0)&(data$sd_training_resp.keys==same)),"accuracy_retro_training"] = 1
data[which((data$retro_0_post_1_training==0)&(data$change_or_no_training==1)&(data$sd_training_resp.keys==diff)),"accuracy_retro_training"] = 1
data[which((data$retro_0_post_1_training==0)&(data$change_or_no_training==0)&(data$sd_training_resp.keys==diff)),"accuracy_retro_training"] = 0
data[which((data$retro_0_post_1_training==0)&(data$change_or_no_training==1)&(data$sd_training_resp.keys==same)),"accuracy_retro_training"] = 0
#Log accuracy for post-cue trials
data[which((data$retro_0_post_1_training==1)&(data$change_or_no_training==0)&(data$sd_training_resp.keys==same)),"accuracy_post_training"] = 1
data[which((data$retro_0_post_1_training==1)&(data$change_or_no_training==1)&(data$sd_training_resp.keys==diff)),"accuracy_post_training"] = 1
data[which((data$retro_0_post_1_training==1)&(data$change_or_no_training==0)&(data$sd_training_resp.keys==diff)),"accuracy_post_training"] = 0
data[which((data$retro_0_post_1_training==1)&(data$change_or_no_training==1)&(data$sd_training_resp.keys==same)),"accuracy_post_training"] = 0
accuracy_retro_shortretint = sum(data[short_int_training_indices_retro,"accuracy_retro_training"],na.rm=T)/n_shortretint_retro
accuracy_retro_longretint = sum(data[long_int_training_indices_retro,"accuracy_retro_training"],na.rm=T)/n_longretint_retro
accuracy_post_shortretint = sum(data[short_int_training_indices_post,"accuracy_post_training"],na.rm=T)/n_shortretint_post
accuracy_post_longretint = sum(data[long_int_training_indices_post,"accuracy_post_training"],na.rm=T)/n_longretint_post
results_all[sub,1] = accuracy_retro_shortretint
results_all[sub,2] = accuracy_retro_longretint
results_all[sub,3] = accuracy_post_shortretint
results_all[sub,4] = accuracy_post_longretint
barplot(c(accuracy_retro_shortretint,accuracy_post_shortretint,accuracy_retro_longretint,accuracy_post_longretint),names.arg = c("Retro-cue\nshort retention","Post-cue\nshort retention","Retro-cue\nlong retention","Post-cue\nlong retention"),ylab="accuracy",ylim=c(0,0.8))
#Log accuracy retro-cue trials main trials
data[which((data$retro_0_post_1_real==0)&(data$change_or_no_real==0)&(data$sd_resp_real.keys==same)),"accuracy_retro_real"] = 1
data[which((data$retro_0_post_1_real==0)&(data$change_or_no_real==1)&(data$sd_resp_real.keys==diff)),"accuracy_retro_real"] = 1
data[which((data$retro_0_post_1_real==0)&(data$change_or_no_real==0)&(data$sd_resp_real.keys==diff)),"accuracy_retro_real"] = 0
data[which((data$retro_0_post_1_real==0)&(data$change_or_no_real==1)&(data$sd_resp_real.keys==same)),"accuracy_retro_real"] = 0
#Log accuracy post-cue trials main trials
data[which((data$retro_0_post_1_real==1)&(data$change_or_no_real==0)&(data$sd_resp_real.keys==same)),"accuracy_post_real"] = 1
data[which((data$retro_0_post_1_real==1)&(data$change_or_no_real==1)&(data$sd_resp_real.keys==diff)),"accuracy_post_real"] = 1
data[which((data$retro_0_post_1_real==1)&(data$change_or_no_real==0)&(data$sd_resp_real.keys==diff)),"accuracy_post_real"] = 0
data[which((data$retro_0_post_1_real==1)&(data$change_or_no_real==1)&(data$sd_resp_real.keys==same)),"accuracy_post_real"] = 0
short_int_main_indices = which(data$retention_interval_real==0.75)
short_int_main_indices_retro = which((data$retention_interval_real==0.75)&(data$retro_0_post_1_real==0))
short_int_main_indices_post = which((data$retention_interval_real==0.75)&(data$retro_0_post_1_real==1))
long_int_main_indices = which(data$retention_interval_real==2.60)
long_int_main_indices_retro = which((data$retention_interval_real==2.60)&(data$retro_0_post_1_real==0))
long_int_main_indices_post = which((data$retention_interval_real==2.60)&(data$retro_0_post_1_real==1))
mainAccRetroShort = sum(data[short_int_main_indices_retro,"accuracy_retro_real"],na.rm=T)/length(short_int_main_indices_retro)
mainAccRetroLong = sum(data[long_int_main_indices_retro,"accuracy_retro_real"],na.rm=T)/length(long_int_main_indices_retro)
mainAccPostLong = sum(data[long_int_main_indices_post,"accuracy_post_real"],na.rm=T)/length(long_int_main_indices_post)
results_all[sub,5] = mainAccRetroShort
results_all[sub,6] = mainAccRetroLong
results_all[sub,7] = mainAccPostLong
barplot(c(mainAccRetroShort,mainAccRetroLong,mainAccPostLong),names.arg=c("Retro short","Retro long","Post long"))
trial_length[sub] = mean(diff(data$memDisplayOnTime),na.rm=T)
}
trial_length
mean(trial_length)
8.22*500
50*8.22
6165/3600
